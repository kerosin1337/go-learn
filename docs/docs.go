// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "post": {
                "description": "Create a new user with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userRequestDto.CreateUserDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/userResponseDto.UserResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "response.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "password": {
                            "type": "string",
                            "example": "Field 'password' validation failed on the rule 'required'"
                        }
                    }
                }
            }
        },
        "userRequestDto.CreateUserDto": {
            "type": "object",
            "required": [
                "birthday",
                "email",
                "name",
                "password"
            ],
            "properties": {
                "birthday": {
                    "type": "string",
                    "example": "2015-09-15T14:00:12-00:00"
                },
                "email": {
                    "type": "string",
                    "example": "test@test.ru"
                },
                "name": {},
                "password": {
                    "type": "string"
                }
            }
        },
        "userResponseDto.UserResponse": {
            "type": "object",
            "required": [
                "CreatedAt",
                "ID",
                "UpdatedAt",
                "birthday",
                "email",
                "name"
            ],
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "example": "2023-06-19T12:23:08.904269+07:00"
                },
                "DeletedAt": {
                    "type": "string",
                    "example": "null"
                },
                "ID": {
                    "type": "integer",
                    "example": 36
                },
                "UpdatedAt": {
                    "type": "string",
                    "example": "2023-06-19T12:23:08.904269+07:00"
                },
                "birthday": {
                    "type": "string",
                    "example": "2015-09-15T14:00:12Z"
                },
                "email": {
                    "type": "string",
                    "example": "test@test.ru"
                },
                "name": {
                    "type": "string",
                    "example": "test"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "localhost:12300",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Your Gin API",
	Description:      "This is a sample Gin API with Swagger documentation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
